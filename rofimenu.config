#!/bin/bash
# Configuration file for rofimenu script
#
# Top level menu consists of modi names from modilist.
# Modilist is a comma separated list of default modi (drun,run...) and/or custom modi.
# Names of default modi can be set as rofi options (e.g. -display-drun Applications).
# Custom modi format: "modi_name:modi_script".
# Menu functions from this script can be used as modi like this "<menu_name>:$thisscript -menu <menu_function>"
# pause needed for smooth transition when menu command refers to other modi
DELAY=0.06
delay() {
	sleep $DELAY
}
# Define modi labels for menu
APPS=" "
DEV=" "
NETWORKING=" 歷"
GOOGLE=" "
BLANK=" "
EXIT=" "

modilist="\
$APPS:$thisscript -menu ${APPS#* },\
$DEV:$thisscript -menu ${DEV#* },\
$NETWORKING:$thisscript -menu ${NETWORKING#* },\
$GOOGLE:$thisscript -menu ${GOOGLE#* },\
$BLANK:$thisscript -menu ${BLANK#* },\
$BLANK:$thisscript -menu ${BLANK#* },\
$BLANK:$thisscript -menu ${BLANK#* },\
$BLANK:$thisscript -menu ${BLANK#* },\
$BLANK:$thisscript -menu ${BLANK#* },\
$BLANK:$thisscript -menu ${BLANK#* },\
$BLANK:$thisscript -menu ${BLANK#* },\
$BLANK:$thisscript -menu ${BLANK#* },\
$BLANK:$thisscript -menu ${BLANK#* },\
$BLANK:$thisscript -menu ${BLANK#* },\
$BLANK:$thisscript -menu ${BLANK#* },\
$BLANK:$thisscript -menu ${BLANK#* },\
$BLANK:$thisscript -menu ${BLANK#* },\
$BLANK:$thisscript -menu ${BLANK#* },\
$EXIT:$thisscript -menu ${EXIT#* }"


# Menu functions print lines in format "label:command".
# Menu content

# All Apps from the menu in one menu
() {
	echo "  Atom:atom"
	echo "  Barrier:barrier"
	echo "  Docs:firefox docs.google.com"
	echo "  Drive:firefox drive.google.com"
	echo "  Firefox:firefox"
	echo "  Github:firefox github.com/NybuTG"
	echo "  Okular:okular"
	echo "  Pycharm:pycharm"
	echo "  Sheets:firefox sheets.google.com"
	echo "蠟  Slides:firefox slides.google.com"
	echo "  Spectacle:spectacle"
	echo "  Spotify:spotify"
	echo "  Teams:teams"
	echo "  Terminal:termite"
	echo "  Thunar:thunar "
	echo "  Visual Studio Code:code"
	echo "  Gimp:gimp"


}

# Dev
() {
	echo "  Pycharm:pycharm"
	echo "  Atom:atom"
	echo "  Vim:vim"
	echo "  Github:firefox github.com/NybuTG"
}

# Networking
歷() {
	echo "  Barrier:barrier"
	echo "  Wi-Fi:termite -e nmtui "
	echo "  Firefox:firefox"
	echo "  Teams:teams"
}

# Text editing / Office Utils
() {
	echo "  Docs:firefox docs.google.com"
	echo "蠟  Slides:firefox slides.google.com"
	echo "  Drive:firefox drive.google.com"
	echo "  Sheets:firefox sheets.google.com"
}
# Exit menu
() {
	echo "  Lock:screenlock"
	echo "  Suspend:systemctl suspend"
	echo "  Hibernate:systemctl hibernate"
	echo "  Logout:bspc quit"
	echo "  Reboot:systemctl reboot"
	echo "  Shutdown:systemctl poweroff"
}

DT_WIDTH=200		# pixels
##TODO determine desktop menu line height according to theme
DT_LINE_HEIGHT=23	# pixels
DT_THEME="
*{
	lines:		20;
	scrollbar:	false;
	dynamic:	true;
}
#window {
	width:		${DT_WIDTH}px;
	children:	[ dt-mainbox ];
}
#mode-switcher {
	enabled:	false;
}
#button {
	width:		${DT_WIDTH}px;
	padding:	2px 1ch;
}
#inputbar {
	enabled:	false;
}"
activate_category() {	# shows drun modi filtered with category. If no command selected, returns to categories modi
	label="${1% *}"	# remove submenu mark
	category="$2"
	linenumber="$3"
	theme=""
	goback="$thisscript -show \"$CAT\""
	if [ $# -gt 3 ] ; then	# that means categories for desktop menu, number of lines before categories, X, Y
		addlinenumber=$4
		X=$5
		Y=$6
		linenumber=$(($linenumber+$addlinenumber))
		if [ $linenumber -gt 0 ] ; then
			i=$linenumber
			dummy="true"
			dummyline="textboxdummy"
			while [ $i -gt 1 ] ; do
				dummyline="textboxdummy,$dummyline"
				i=$(($i-1))
			done
		else
			dummy="false"
		fi
		# adjust X if too close to the right side of the screen
		MAX_X=$(wattr w $(lsw -r) )
		anchor="north"
		if [ $X -gt $((${MAX_X}-${DT_WIDTH}*2)) ] ; then
			anchor="${anchor}east"
			X=$MAX_X
		else
			anchor="${anchor}west"
		fi
		theme="$DT_THEME
			* {
				x-offset:	$X;
				y-offset:	$Y;
				anchor:		$anchor;
			}
			#window {
				width:		$((${DT_WIDTH}*2));
			}
			#mode-switcher {
				enabled:	true;
			}
			#boxdummy {
				enabled:	$dummy;
				children:	[ $dummyline ];
			}"
		goback="$thisscript -desktop $X $Y"
	fi
	command=$(delay; $thisscript \
				-only drun \
				-drun-match-fields categories,name \
				-display-drun "$label" \
				-filter "$category " \
				-run-command "echo {cmd}" \
				-run-shell-command "echo {terminal} -e {cmd}" \
				-theme-str "$theme")
	if [ -n "$command" ] ; then
		eval "$command" &
		exit
	fi
	# return to categories modi. No delay needed
	eval $goback &

	if [ $linenumber -eq 0 ] ; then	# if the category is on the top line
		exit
	fi
	# move rofi selection down by linenumber
	keys=""
	while [ $linenumber -gt 0 ] ; do
		keys="$keys Tab"
		linenumber=$(($linenumber-1))
	done
	##TODO wait until rofi can take input
	delay
	delay
	xdotool search --class rofi key --delay 0 $keys
}
## rofi theme file can be set here
# ROFIMENU_THEME="$HOME/.config/rofimenu/rofimenu.rasi"
